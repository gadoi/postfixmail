https://linoxide.com/mail/install-configure-postfix-ubuntu/
https://postfix-configuration.readthedocs.io/en/latest/postfix/index.html

Step 1) Install and configure Postfixadmin
Postfixadmin is a web module that allows you to easily manipulate virtual domains and users in a database.

a) Download postfixadmin
First, we will install the required packages

# apt install php-imap php-mbstring php7.2-imap php7.2-mbstring

Normally postfixadmin is present on the default repositories of Ubuntu 18.04 but it will try to install Apache and PostgreSQL instead of Nginx and MySql. So, to keep our configuration, we will download the actual latest version 3.2 from source on the Github site project and save it in /opt folder

# wget -P /opt https://github.com/postfixadmin/postfixadmin/archive/postfixadmin-3.2.4.tar.gz

# cd /opt && tar xvf postfixadmin-3.2.4.tar.gz
Now we should rename it

# mv postfixadmin-postfixadmin-3.2/ postfixadmin
Postfixadmin uses a script called setup.php that we will use through the web server during the installation.  On the previous version of postfix (3.1 and oldest), this script is directly in the Postfixadmin root folder but in the actual version (3.2), it's contained in the sub-directory public of the postfixadmin folder. Normally we should move postfixadmin to the root folder of our Nginx web server but with this new version, we will only create a symbolic link of the public folder which contains the script then, rename it for some security

# ln -s /opt/postfixadmin/public/ /var/www/html/pfa
root@li1002-235:~# ls -l /var/www/html/
total 4
-rw-r--r-- 1 root root 612 Jun 10 04:51 index.nginx-debian.html
lrwxrwxrwx 1 root root  25 Jun 12 04:01 pfa -> /opt/postfixadmin/public/
b) Create the postfix database
Now we should connect to mysql database for some configurations

# mysql -u root -p
Enter password:
Then create the database and the user

mysql> CREATE DATABASE postfix;
Query OK, 1 row affected (0.00 sec)

mysql> CREATE USER 'postfix'@'localhost' IDENTIFIED BY '123456a@Cyber';
Query OK, 0 rows affected (0.00 sec)

mysql> GRANT ALL PRIVILEGES ON `postfix` . * TO 'postfix'@'localhost';
Query OK, 0 rows affected (0.00 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.00 sec)

mysql> exit
Bye
c) Configure postfixadmin
Now that we have configured the database, we should indicate it to postfixadmin so that it could know where to get the information. To do this, create the /opt/postfixadmin/config.local.php file and add the content below

# vim /opt/postfixadmin/config.local.php

<?php
$CONF['database_type'] = 'mysqli';
$CONF['database_user'] = 'postfix';
$CONF['database_password'] = '123456a@Cyber';
$CONF['database_name'] = 'postfix';

$CONF['configured'] = true;
?>

Step 2) Install and configure postfix
a) Install postfix
Now we can install the postfix packages.

# apt install postfix postfix-mysql sasl2-bin
...

You will have to answer two question about the type of mail and the name of your mail server. Make sure to replace the hostname and domain values with yours

the type of mail configuration: Internet Site
the system mail name: hostname.domain.com
Make sure that sasl run at the startup by editing its configuration file

# vim /etc/default/saslauthd

# Should saslauthd run automatically on startup? (default: no)
START=yes
Now restart the service

# systemctl restart saslauthd
As we are configuring a mail server with virtual users, we need an owner of all mailboxes so will create a system user which will be used by all virtual users to access email on the server. First, create the group owner and the folder which will store the mailboxes.

# groupadd -g 5000 vmail && mkdir -p /var/vmail
Now create the owner

# useradd -u 5000 vmail -g vmail -s /usr/sbin/nologin -d /var/vmail
Make sure to give the permission of the mail directory to the owner so that it can store the mails into the appropriate directories.

# chown -R vmail:vmail /var/vmail


If you don't do this, dovecot will not be able to create the required folders to store the emails.

b) Create the configuration files for the database
Now create a folder which will contain some database files

# mkdir -p /etc/postfix/sql
Postfix need 03 database files which will allow it to access the database that we created earlier:

Domains to contain the list of domain names hosted on the server. it will allow postfix to determine if our server is in charge of a domain (mytuto.com) when it receives an email (user@mytuto.com) on it. If it's the case, it will mean that the domain is in our database.
# vim /etc/postfix/sql/mysql_virtual_domains_maps.cf
user = postfix
password = 123456a@Cyber
hosts = 127.0.0.1
dbname = postfix
query = SELECT domain FROM domain WHERE domain='%s' AND active = '1'
We will enable the configuration and add it automatically to the /etc/postfix/main.cf file and reload the postfix configuration to avoid having to do it manually. So the file will be updated everytime you use this command with new values.

# postconf -e virtual_mailbox_domains=mysql:/etc/postfix/sql/mysql_virtual_domains_maps.cf
Now we can check the configuration. We will run a command that will execute the query contained in the file in order to search for a domain in our database. An element (the searched domain) must be returned or nothing if the domain is not present.

# postmap -q cybergate.info mysql:/etc/postfix/sql/mysql_virtual_domains_maps.cf
cybergate.info

As you can see, postfix is able to retrieve the domains stored in our database

Mailbox to store all the virtual email addresses. It will be used to verify also if the mailboxes exist
# vim /etc/postfix/sql/mysql_virtual_mailbox_maps.cf
user = postfix
password = 123456a@Cyber
hosts = 127.0.0.1
dbname = postfix
query = SELECT maildir FROM mailbox WHERE username='%s' AND active = '1'
Now let's update the configuration file

# postconf -e virtual_mailbox_maps=mysql:/etc/postfix/sql/mysql_virtual_mailbox_maps.cf
Run the command to test the query on the database

# postmap -q chienhm@cybergate.info mysql:/etc/postfix/sql/mysql_virtual_mailbox_maps.cf
cybergate.info/chienhm/
Alias to contain the different email aliases.

# vim /etc/postfix/sql/mysql_virtual_alias_maps.cf
user = postfix
password = 123456a@Cyber
hosts = 127.0.0.1
dbname = postfix
query = SELECT goto FROM alias WHERE address='%s' AND active = '1'
Now add the configuration

# postconf -e virtual_alias_maps=mysql:/etc/postfix/sql/mysql_virtual_alias_maps.cf
Now run the command to test the query. It is the destination user (alain@mytuto.com) that should be displayed and not the abuse address. It shows that postfix can do the matching.

# postmap -q admin@cybergate.info mysql:/etc/postfix/sql/mysql_virtual_alias_maps.cf
superadmin@cybergate.info

Make sure that those files are not readable by the normal users because the passwords are stored in clear.

# ls -l /etc/postfix/sql/
total 12
-rw-r--r-- 1 root root 138 Jun 13 06:53 mysql_virtual_alias_maps.cf
-rw-r--r-- 1 root root 140 Jun 13 05:18 mysql_virtual_domains_maps.cf
-rw-r--r-- 1 root root 144 Jun 13 07:04 mysql_virtual_mailbox_maps.cf
In order for postfix to read those file, we can change the group owner to postfix

# chgrp postfix /etc/postfix/sql/mysql_*.cf
# ls -l /etc/postfix/sql/
total 12
-rw-r--r-- 1 root postfix 138 Jun 13 06:53 mysql_virtual_alias_maps.cf
-rw-r--r-- 1 root postfix 140 Jun 13 05:18 mysql_virtual_domains_maps.cf
-rw-r--r-- 1 root postfix 144 Jun 13 07:04 mysql_virtual_mailbox_maps.cf
c) Configure postfix
Now we will manually edit the postfix main configuration file. So, make a copy before editing

# cp /etc/postfix/main.cf /etc/postfix/main.cf.bak
Now we will activate SASL to force authentication for sending emails and hand off authentication to Dovecot. Be sure to add lines below

# vim /etc/postfix/main.cf

# Allow authenticated users to send email, and use Dovecot to authenticate them. Tells Postfix to use Dovecot for authentication
smtpd_sasl_type = dovecot
## Path to the Postfix auth socket
smtpd_sasl_path = private/auth
## Tells Postfix to let people send email if they've authenticated to the server.
## Otherwise they can only send if they're logged in (SSH)
smtpd_sasl_auth_enable = yes
smtpd_sasl_security_options = noanonymous
smtpd_sasl_local_domain = $myhostname
# Enable authentication only for those with a TLS connection.
smtpd_tls_security_level = may
smtpd_tls_auth_only = no
# Tells Postfix who can send email: SASL-authenticated users connecting from a network specified in 'mynetworks'
smtpd_recipient_restrictions = permit_mynetworks permit_sasl_authenticated reject_unauth_destination
Now let's edit the /etc/postfix/master.cf configuration file. It's the process configuration file. We will enable secure SMTP ports by adding or uncomment the lines below and make a copy before

# cp /etc/postfix/master.cf /etc/postfix/master.cf.bak
# vim /etc/postfix/master.cf
submission inet n       -       y       -       -       smtpd
  -o syslog_name=postfix/submission
  -o smtpd_tls_security_level=encrypt
  -o smtpd_sasl_auth_enable=yes
#  -o smtpd_tls_auth_only=yes
#  -o smtpd_reject_unlisted_recipient=no
#  -o smtpd_client_restrictions=$mua_client_restrictions
  -o smtpd_client_restrictions=permit_sasl_authenticated,reject
#  -o smtpd_helo_restrictions=$mua_helo_restrictions
#  -o smtpd_sender_restrictions=$mua_sender_restrictions
#  -o smtpd_recipient_restrictions=
#  -o smtpd_relay_restrictions=permit_sasl_authenticated,reject
  -o milter_macro_daemon_name=ORIGINATING
smtps     inet  n       -       y       -       -       smtpd
  -o syslog_name=postfix/smtps
  -o smtpd_tls_wrappermode=yes
  -o smtpd_sasl_auth_enable=yes
#  -o smtpd_reject_unlisted_recipient=no
#  -o smtpd_client_restrictions=$mua_client_restrictions
#  -o smtpd_helo_restrictions=$mua_helo_restrictions
#  -o smtpd_sender_restrictions=$mua_sender_restrictions
#  -o smtpd_recipient_restrictions=
#  -o smtpd_relay_restrictions=permit_sasl_authenticated,reject
  -o smtpd_client_restrictions=permit_sasl_authenticated,reject
  -o milter_macro_daemon_name=ORIGINATING
Now you can run the postconf -n command to check some errors

# postconf -n
alias_database = hash:/etc/aliases
alias_maps = hash:/etc/aliases
...
...
If you have no warning messages, it means that your files do not contain errors. Now you can restart the postfix service

# systemctl restart postfix
# systemctl status postfix

Step 3) Install and configure Dovecot
Now that Postfix is installed and configured, we need to install postfix to manage the pop and imap protocols, which allow us to recover our emails.

a) Installation of Dovecot
Dovecot packages are presents in the Ubuntu 18.04 default repositories. We will install it with the mysql support. We will install sieve which is useful because it will automatically put the mails into the corresponding folders. It means that, for each domain, it will create a corresponding folder containing the corresponding folder of a virtual user to store its email files.

# apt install dovecot-imapd dovecot-mysql dovecot-managesieved
...

Understand that, if you don't want to use sieve, for each domain, you will probably need to manually create the corresponding folders in order to store its emails and this not easy if you have many domains.

b) Configuration of dovecot
The configuration of Dovecot is contained into multiples files in /etc/dovecot/conf.d. First, check the content of the /etc/dovecot/dovecot.conf to have these lines uncommented

!include_try /usr/share/dovecot/protocols.d/*.protocol
!include conf.d/*.conf
Now go to the folder containing the configuration files

# cd /etc/dovecot/conf.d
We will edit:

the 10-auth.conf file to modify the connection mechanisms by adding or uncommenting the lines. Dovecot uses the system users by default but we use Mysql users
# cp 10-auth.conf 10-auth.conf.bak
